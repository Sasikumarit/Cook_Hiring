{"version":3,"file":"static/js/311.f5d848d4.chunk.js","mappings":"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","sources":["views/components/Customer/PostJob.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport dayjs from \"dayjs\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { toast } from \"react-toastify\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\nimport { Roles } from \"../../util/Utils\";\r\nimport UpdateIcon from \"@mui/icons-material/Update\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\n\r\nconst PostJob = ({ user, OncloseHandler,data }) => {\r\n  const initialState = {\r\n    jobdescription: \"\",\r\n    location: \"\",\r\n    fromdate: dayjs(new Date()),\r\n    todate: dayjs(new Date()),\r\n    wageperday: \"\",\r\n    mobileno: \"\",\r\n    userid: user.id,\r\n  };\r\n\r\n  const [state, setState] = useState(data?.isEditMode===true ? data.editData:initialState);\r\n  const config = {\r\n    headers:{\r\n        Authorization: user?.token,\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (event, controlid, controlvalue) => {\r\n    if (controlid === \"fromdate\" || controlid === \"todate\") {\r\n      setState({ ...state, [controlid]: controlvalue });\r\n    } else {\r\n      const { id, value } = event.target;\r\n      setState({ ...state, [id]: value });\r\n    }\r\n  };\r\n\r\n  const onSubmitHandler = () => {\r\n    if (\r\n      _.isEmpty(state.jobdescription) ||\r\n      _.isEmpty(state.location) ||\r\n      _.isEmpty(state.wageperday) ||\r\n      _.isEmpty(state.fromdate) ||\r\n      _.isEmpty(state.todate)\r\n    ) {\r\n      toast.error(\"Please enter all manadatory data\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    } else {\r\n      document.getElementById(\"btn_save\").disabled = true;\r\n\r\n      if (data?.isEditMode === true){\r\n        axios\r\n        .put(process.env.REACT_APP_ServerHost + `jobs/${state.id}`, {\r\n          ...state,\r\n          fromdate: dayjs(state.fromdate).format(\"YYYY-MM-DD\"),\r\n          todate: dayjs(state.todate).format(\"YYYY-MM-DD\"),\r\n        },config)\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            toast.success(\"Job Updated Successfully.\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: false,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: \"light\",\r\n            });\r\n            setState(initialState);\r\n            OncloseHandler(\"Job Details\");\r\n          }\r\n        })\r\n        .catch((ex) => {\r\n          toast.error(\"Failed to Save date.\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n        })\r\n        .finally(() => {\r\n          document.getElementById(\"btn_save\").disabled = false;\r\n        });\r\n      }\r\n      else{\r\n      axios\r\n        .post(process.env.REACT_APP_ServerHost + `jobs`, {\r\n          ...state,\r\n          fromdate: dayjs(state.fromdate).format(\"YYYY-MM-DD\"),\r\n          todate: dayjs(state.todate).format(\"YYYY-MM-DD\"),\r\n        },config)\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            toast.success(\"Job Saved Successfully.\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: false,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: \"light\",\r\n            });\r\n            setState(initialState);\r\n          }\r\n        })\r\n        .catch((ex) => {\r\n          toast.error(\"Failed to Save date.\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: false,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n        })\r\n        .finally(() => {\r\n          document.getElementById(\"btn_save\").disabled = false;\r\n        });\r\n      }\r\n\r\n    }\r\n  };\r\n  return (\r\n    <>    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        \"& .MuiTextField-root\": { m: 1, width: \"25ch\" },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <div style={{ display: \"flex\" }}>\r\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n          <TextField\r\n            required\r\n            id=\"jobdescription\"\r\n            label=\"Job's Description\"\r\n            value={state.jobdescription}\r\n            onChange={onChangeHandler}\r\n          />\r\n          <TextField\r\n            required\r\n            id=\"location\"\r\n            label=\"Location\"\r\n            value={state.location}\r\n            onChange={onChangeHandler}\r\n          />\r\n          <DatePicker\r\n            disableFuture\r\n            label=\"From Date\"\r\n            openTo=\"day\"\r\n            views={[\"year\", \"month\", \"day\"]}\r\n            value={state.fromdate}\r\n            onChange={(newValue) => {\r\n              onChangeHandler(\"\", \"fromdate\", newValue);\r\n            }}\r\n            id=\"fromdate\"\r\n            renderInput={(params) => (\r\n              <TextField id=\"fromdate_textField\" {...params} />\r\n            )}\r\n          />\r\n          <DatePicker\r\n            label=\"To Date\"\r\n            openTo=\"day\"\r\n            views={[\"year\", \"month\", \"day\"]}\r\n            value={state.todate}\r\n            onChange={(newValue) => {\r\n              onChangeHandler(\"\", \"todate\", newValue);\r\n            }}\r\n            id=\"todate\"\r\n            renderInput={(params) => (\r\n              <TextField id=\"todate_textField\" {...params} />\r\n            )}\r\n          />\r\n\r\n          <TextField\r\n            required\r\n            id=\"wageperday\"\r\n            label=\"Wage/Pay (per day)\"\r\n            value={state.wageperday}\r\n            onChange={onChangeHandler}\r\n          />\r\n\r\n          <div style={{ marginTop: \"1rem\", padding: \"5px\" }}>\r\n            <Button\r\n              name=\"save\"\r\n              value={data?.isEditMode === true?'Update':\"Save\"}\r\n              id=\"btn_save\"\r\n              onClick={() => onSubmitHandler()}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={data?.isEditMode ===true ? <UpdateIcon />:<SaveIcon />}\r\n            >\r\n             {data?.isEditMode ===true ?'Update':'Save'}\r\n            </Button>\r\n          </div>\r\n          {user?.userrole.toLowerCase() === Roles.Admin.toLocaleLowerCase() && (\r\n            <div style={{ marginTop: \"1rem\", padding: \"5px\" }}>\r\n              <Button\r\n                name=\"cancel\"\r\n                value=\"Cancel\"\r\n                onClick={() => OncloseHandler(\"Job Details\")}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<ArrowBackIcon />}\r\n              >\r\n                Back\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </LocalizationProvider>\r\n      </div>\r\n    </Box>\r\n</>\r\n\r\n  );\r\n};\r\n\r\nexport default PostJob;\r\n"],"names":["user","OncloseHandler","data","initialState","jobdescription","location","fromdate","dayjs","Date","todate","wageperday","mobileno","userid","id","useState","isEditMode","editData","state","setState","config","headers","Authorization","token","onChangeHandler","event","controlid","controlvalue","target","value","component","sx","m","width","noValidate","autoComplete","style","display","dateAdapter","AdapterDayjs","required","label","onChange","disableFuture","openTo","views","newValue","renderInput","params","marginTop","padding","name","onClick","_","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","document","getElementById","disabled","axios","process","format","then","res","status","catch","ex","finally","variant","color","startIcon","userrole","toLowerCase","Roles"],"sourceRoot":""}